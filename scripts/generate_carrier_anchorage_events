#!/bin/bash
source pipe-tools-utils

THIS_SCRIPT_DIR="$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )"
# source ${THIS_SCRIPT_DIR}/pipeline.sh
ASSETS=${THIS_SCRIPT_DIR}/../assets
ARGS=( \
  SOURCE_ENCOUNTER_EVENTS \
  SOURCE_LOITERING_EVENTS \
  SOURCE_VESSEL_INFO \
  SOURCE_VESSEL_DATABASE \
  SOURCE_PORT_VISITS \
  SOURCE_NAMED_ANCHORAGES \
  MIN_STOP_LENGTH \
  DEST_TABLE \
)

################################################################################
# Validate and extract arguments
################################################################################
display_usage() {
  echo -e "\nUsage:\n$0 SOURCE_ENCOUNTER_EVENTS SOURCE_LOITERING_EVENTS SOURCE_VESSEL_INFO SOURCE_VESSEL_DATABASE SOURCE_PORT_VISITS SOURCE_NAMED_ANCHORAGES MIN_STOP_LENGTH DEST_TABLE"
}

if [[ $# -ne ${#ARGS[@]} ]]
then
    display_usage
    exit 1
fi

ARG_VALUES=("$@")
PARAMS=()
for index in ${!ARGS[*]}; do
  echo "${ARGS[$index]}=${ARG_VALUES[$index]}"
  declare "${ARGS[$index]}"="${ARG_VALUES[$index]}"
done

echo "Running $0"
echo "  SOURCE_ENCOUNTER_EVENTS: $SOURCE_ENCOUNTER_EVENTS"
echo "  SOURCE_LOITERING_EVENTS: $SOURCE_LOITERING_EVENTS"
echo "  SOURCE_VESSEL_INFO: $SOURCE_VESSEL_INFO"
echo "  SOURCE_VESSEL_DATABASE: $SOURCE_VESSEL_DATABASE"
echo "  SOURCE_PORT_VISITS: $SOURCE_PORT_VISITS"
echo "  SOURCE_NAMED_ANCHORAGES: $SOURCE_NAMED_ANCHORAGES"
echo "  MIN_STOP_LENGTH: $MIN_STOP_LENGTH"
echo "  DEST_TABLE: $DEST_TABLE"
################################################################################
# Force that the destination table exists
################################################################################
echo "Ensuring events table ${DEST_TABLE} exists"
TABLE_DESC=(
  "* Pipeline: ${PIPELINE} ${PIPELINE_VERSION}"
  "* Source: ${SOURCE_TABLE}"
  "* Command:"
  "$(basename $0)"
  "$@"
)
TABLE_DESC=$( IFS=$'\n'; echo "${TABLE_DESC[*]}" )
SCHEMA=${ASSETS}/bigquery/events.schema.json
bq mk --force \
  --description "${TABLE_DESC}" \
  ${DEST_TABLE}

if [ "$?" -ne 0 ]; then
  echo "  Unable to create table ${DEST_TABLE}"
  exit 1
fi
echo "  Events table exists"

################################################################################
# Generate the anchorage events
################################################################################
echo "Generating port events at ${DEST_TABLE}"
SQL=${ASSETS}/bigquery/carrier-anchorage-events.sql.j2
jinja2 ${SQL} \
  -D encounter_events=${SOURCE_ENCOUNTER_EVENTS//:/.} \
  -D loitering_events=${SOURCE_LOITERING_EVENTS//:/.} \
  -D vessel_info=${SOURCE_VESSEL_INFO//:/.} \
  -D vessel_database=${SOURCE_VESSEL_DATABASE//:/.} \
  -D port_visits=${SOURCE_PORT_VISITS//:/.} \
  -D named_anchorages=${SOURCE_NAMED_ANCHORAGES//:/.} \
  -D min_stop_length=${MIN_STOP_LENGTH} \
  | bq query --max_rows=0 --allow_large_results --replace --destination_table ${DEST_TABLE}

if [ "$?" -ne 0 ]; then
  echo "  Unable to insert records for table ${DEST_TABLE}"
  exit 1
fi

echo "${DEST_TABLE} Done."
