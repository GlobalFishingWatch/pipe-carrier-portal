#!/bin/bash
source pipe-tools-utils

THIS_SCRIPT_DIR="$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )"
# source ${THIS_SCRIPT_DIR}/pipeline.sh
ASSETS=${THIS_SCRIPT_DIR}/../assets
ARGS=( \
  DATE_RANGE \
  SOURCE_PUBLISHED_LOITERING_EVENTS \
  SOURCE_SEGMENT_INFO \
  SOURCE_SPATIAL_MEASURES \
  SOURCE_COUNTRY_CODES \
  SOURCE_VOYAGES_C4 \
  SOURCE_NAMED_ANCHORAGES \
  SOURCE_RESEARCH_SEGS \
  SOURCE_CARRIER_VESSELS_BYYEAR_V \
  DEST_TABLE \
)

################################################################################
# Validate and extract arguments
################################################################################
display_usage() {
  ARG_NAMES=$(echo "${ARGS[*]}")
  echo -e "\nUsage:\n$0 $ARG_NAMES\n"
}

if [[ $# -ne ${#ARGS[@]} ]]
then
    display_usage
    exit 1
fi

echo "Running $0"
ARG_VALUES=("$@")
for index in ${!ARGS[*]}; do
  echo "  ${ARGS[$index]}=${ARG_VALUES[$index]}"
  declare "${ARGS[$index]}"="${ARG_VALUES[$index]}"
done

IFS=, read START_DATE END_DATE <<<"${DATE_RANGE}"
if [ -z $END_DATE ] || [ $END_DATE == $START_DATE ]; then
  END_DATE=$(date +%Y-%m-%d -d "$START_DATE + 1 day")
fi
################################################################################
# Force that the destination table exists
################################################################################
echo "Ensuring events table ${DEST_TABLE} exists"
TABLE_DESC=(
  "* Pipeline: ${PIPELINE} ${PIPELINE_VERSION}"
  "* Source: ${SOURCE_TABLE}"
  "* Command:"
  "$(basename $0)"
  "$@"
)
TABLE_DESC=$( IFS=$'\n'; echo "${TABLE_DESC[*]}" )
SCHEMA=${ASSETS}/bigquery/events.schema.json
bq mk --force \
  --description "${TABLE_DESC}" \
  ${DEST_TABLE} \
  ${SCHEMA}

if [ "$?" -ne 0 ]; then
  echo "  Unable to create table ${DEST_TABLE}"
  exit 1
fi
echo "  Events table exists"

################################################################################
# Generate the loitering events
################################################################################
echo "Generating loitering events at ${DEST_TABLE}"
SQL=${ASSETS}/bigquery/events-loitering-events.sql.j2
jinja2 ${SQL} \
  -D source_published_loitering_events=${SOURCE_PUBLISHED_LOITERING_EVENTS//:/.} \
  -D segment_info=${SOURCE_SEGMENT_INFO//:/.} \
  -D spatial_measures=${SOURCE_SPATIAL_MEASURES//:/.} \
  -D country_codes=${SOURCE_COUNTRY_CODES//:/.} \
  -D voyages_c4=${SOURCE_VOYAGES_C4//:/.} \
  -D named_anchorages=${SOURCE_NAMED_ANCHORAGES//:/.} \
  -D segs=${SOURCE_RESEARCH_SEGS//:/.} \
  -D carrier_vessels_byyear_v=${SOURCE_CARRIER_VESSELS_BYYEAR_V//:/.} \
  | bq query --max_rows=0 --allow_large_results --replace --destination_table ${DEST_TABLE}

if [ "$?" -ne 0 ]; then
  echo "  Unable to insert records for table ${DEST_TABLE}"
  exit 1
fi

echo "${DEST_TABLE} Done."
