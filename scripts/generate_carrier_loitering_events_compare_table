#!/bin/bash
source pipe-tools-utils

THIS_SCRIPT_DIR="$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )"
# source ${THIS_SCRIPT_DIR}/pipeline.sh
ASSETS=${THIS_SCRIPT_DIR}/../assets
ARGS=( \
  DATE_RANGE \
  SOURCE_PUBLISHED_LOITERING_EVENTS \
  SOURCE_SEGMENT_INFO \
  SOURCE_SPATIAL_MEASURES \
  SOURCE_COUNTRY_CODES \
  SOURCE_VOYAGES_C4 \
  SOURCE_NAMED_ANCHORAGES \
  SOURCE_RESEARCH_SEGS \
  ALL_VESSELS_BYYEAR_V \
  MIN_EVENT_HOURS \
  DEST_TABLE \
)

################################################################################
# Validate and extract arguments
################################################################################
display_usage() {
  ARG_NAMES=$(echo "${ARGS[*]}")
  echo -e "\nUsage:\n$0 $ARG_NAMES\n"
}

if [[ $# -ne ${#ARGS[@]} ]]
then
    display_usage
    exit 1
fi

echo "Running $0"
ARG_VALUES=("$@")
for index in ${!ARGS[*]}; do
  echo "  ${ARGS[$index]}=${ARG_VALUES[$index]}"
  declare "${ARGS[$index]}"="${ARG_VALUES[$index]}"
done

IFS=, read START_DATE END_DATE <<<"${DATE_RANGE}"
if [ -z $END_DATE ] || [ $END_DATE == $START_DATE ]; then
  END_DATE=$(date +%Y-%m-%d -d "$START_DATE + 1 day")
fi

end_date_minus_one_day=$(date --date="${END_DATE} -1 day" +%Y-%m-%d)
end_date_minus_two_days=$(date --date="${END_DATE} -2 days" +%Y-%m-%d)

end_date_no_hyphens=${END_DATE//-}
end_date_minus_one_day_no_hyphens=${end_date_minus_one_day//-}
end_date_minus_two_days_no_hyphens=${end_date_minus_two_days//-}

current_table_name="${DEST_TABLE}_v${end_date_no_hyphens}"
one_day_previous_table_name="${DEST_TABLE}_v${end_date_minus_one_day_no_hyphens}"
two_days_previous_table_name="${DEST_TABLE}_v${end_date_minus_two_days_no_hyphens}"

view_name="${DEST_TABLE//:/.}"

echo "Current table=${current_table_name}"
echo "One day previous table=${one_day_previous_table_name}"
echo "Two days previous table=${two_days_previous_table_name}"

################################################################################
# Force that the destination table exists
################################################################################
echo "Ensuring events table ${current_table_name} exists"
TABLE_DESC=(
  "* Pipeline: ${PIPELINE} ${PIPELINE_VERSION}"
  "* Source: ${SOURCE_TABLE}"
  "* Command:"
  "$(basename $0)"
  "$@"
)
TABLE_DESC=$( IFS=$'\n'; echo "${TABLE_DESC[*]}" )
SCHEMA=${ASSETS}/bigquery/events.schema.json


# Current table
bq mk --force \
  --description "${TABLE_DESC}" \
  --schema ${SCHEMA} \
  --time_partitioning_field=event_start \
  "${current_table_name}"
if [ "$?" -ne 0 ]; then
  echo "  Unable to create table ${current_table_name}"
  exit 1
fi
echo "  Events table exists"


# previous table
echo "Ensuring events table ${one_day_previous_table_name} exists"
bq mk --force \
  --description "${TABLE_DESC}" \
  --schema ${SCHEMA} \
  --time_partitioning_field=event_start \
  "${one_day_previous_table_name}"
if [ "$?" -ne 0 ]; then
  echo "  Unable to create table ${one_day_previous_table_name}"
  exit 1
fi
echo "  Events table exists"

################################################################################
# Delete existing records
################################################################################
DELETE_SQL=${ASSETS}/bigquery/delete-daterange.sql.j2
echo "Deleting existing records for ${START_DATE} to ${END_DATE}"
jinja2 ${DELETE_SQL} \
  -D table=${current_table_name//:/.} \
  -D start_date=${START_DATE} \
  -D end_date=${END_DATE} \
  | bq query --max_rows=0
if [ "$?" -ne 0 ]; then
  echo "  Unable to delete records for table ${current_table_name} from ${START_DATE} to ${END_DATE}"
  exit 1
fi

################################################################################
# Generate the loitering events
################################################################################
echo "Generating loitering events at ${DEST_TABLE}"
SQL=${ASSETS}/bigquery/events-loitering-events.sql.j2
jinja2 ${SQL} \
  -D start_date=${START_DATE} \
  -D end_date=${END_DATE} \
  -D source_published_loitering_events=${SOURCE_PUBLISHED_LOITERING_EVENTS//:/.} \
  -D segment_info=${SOURCE_SEGMENT_INFO//:/.} \
  -D spatial_measures=${SOURCE_SPATIAL_MEASURES//:/.} \
  -D country_codes=${SOURCE_COUNTRY_CODES//:/.} \
  -D voyages_c4=${SOURCE_VOYAGES_C4//:/.} \
  -D named_anchorages=${SOURCE_NAMED_ANCHORAGES//:/.} \
  -D segs=${SOURCE_RESEARCH_SEGS//:/.} \
  -D min_event_hours=${MIN_EVENT_HOURS//:/.} \
  -D all_vessels_byyear_v=${ALL_VESSELS_BYYEAR_V//:/.} \
  | bq query \
    --max_rows=0 \
    --allow_large_results \
    --replace \
    --destination_table ${current_table_name}

if [ "$?" -ne 0 ]; then
  echo "  Unable to insert records for table ${DEST_TABLE}"
  exit 1
fi


################################################################################
# Create new view
################################################################################
echo "Creating view [${view_name}]"
echo "CREATE OR REPLACE VIEW ${view_name} OPTIONS(description=\"published_events_loitering\") AS SELECT * FROM ${current_table_name//:/.}"

bq query \
  --use_legacy_sql=false \
  "CREATE OR REPLACE VIEW ${view_name} OPTIONS(description=\"published_events_loitering\") AS SELECT * FROM ${current_table_name//:/.}"
if [ "$?" -ne 0 ]; then
  echo "  Unable to create view ${view_name}"
  exit 1
fi

################################################################################
# Remove two days before table
################################################################################
echo "Removing two days before table [${two_days_previous_table_name}]"
bq rm -f -t "${two_days_previous_table_name}"
if [ "$?" -ne 0 ]; then
  echo "  Unable to remove temporal table ${two_days_previous_table_name}"
  exit 1
fi

echo "${current_table_name} Done."
