#!/bin/bash
source pipe-tools-utils

THIS_SCRIPT_DIR="$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )"
ASSETS=${THIS_SCRIPT_DIR}/../assets
ARGS=( \
  START_DATE \
  SOURCE \
  TEMP_BUCKET \
  DEST_INSTANCE \
  DEST_CONNECTION_STRING \
  DEST_TABLE \
  DEST_EVENT_TYPE \
)

################################################################################
# Validate and extract arguments
################################################################################
display_usage() {
  ARG_NAMES=$(echo "${ARGS[*]}")
  echo -e "\nUsage:\n$0 $ARG_NAMES\n"
}

if [[ $# -ne ${#ARGS[@]} ]]
then
    display_usage
    exit 1
fi

echo "Running $0"
ARG_VALUES=("$@")
for index in ${!ARGS[*]}; do
  echo "  ${ARGS[$index]}=${ARG_VALUES[$index]}"
  declare "${ARGS[$index]}"="${ARG_VALUES[$index]}"
done
################################################################################
# Export events to json files
################################################################################
echo "Exporting events from $SOURCE"
EXTRACT_PATH=$TEMP_PATH/bq/*.json
bq extract \
  --destination_format=NEWLINE_DELIMITED_JSON \
  $SOURCE \
  $EXTRACT_PATH
if [ "$?" -ne 0 ]; then
  echo "  Unable to extract ${SOURCE} to ${EXTRACT_PATH}"
  exit 1
fi
echo "  Exported events from ${SOURCE} to ${EXTRACT_PATH}"

################################################################################
# Download the json files locally as it's much faster
################################################################################
echo "Downloading json files"
LOCAL_JSON_PATH=./data/json
echo "  Creating local json directory"
mkdir -p ${LOCAL_JSON_PATH}
if [ "$?" -ne 0 ]; then
  echo "  Unable to create local JSON directory"
  exit 1
fi
echo "  Downloading json files"
gsutil -m cp ${EXTRACT_PATH} ${LOCAL_JSON_PATH}
if [ "$?" -ne 0 ]; then
  echo "  Unable to download JSON files locally"
  exit 1
fi
echo "  Downloaded JSON files"

################################################################################
# Convert format from json to exported sql format
################################################################################
echo "Converting downloaded files to csv format"
LOCAL_CSV_PATH=./data/csv
LOCAL_CSV_FILE=${LOCAL_CSV_PATH}/data.csv
echo "  Creating local csv directory"
mkdir -p ${LOCAL_CSV_PATH}
if [ "$?" -ne 0 ]; then
  echo "  Unable to create local CSV directory"
  exit 1
fi
echo "  Converting json events to csv format"
cat ${LOCAL_JSON_PATH}/*.json | python -m pipe_events.postgres.events ${LOCAL_CSV_FILE}
if [ "$?" -ne 0 ]; then
  echo "  Unable to convert events from JSON to CSV format"
  exit 1
fi
echo "  Coverted events from JSON to CSV"

################################################################################
# Start the cloudsql proxy
################################################################################
echo "Starting the cloudsql proxy"
cloud_sql_proxy -instances=${DEST_INSTANCE}=tcp:5432 &
echo "  Waiting until database is ready at 127.0.0.1:5432"
sleep 5
i=0
while ! nc -v -w 5 127.0.0.1 5432 < /dev/null; do
  i=`expr $i + 1`
  if [ $i -ge 10 ]; then
    echo "    $(date) - still not reachable, giving up"
    exit 1
  fi
  echo "    $(date) - waiting $i/10"
  sleep 5
done
echo "  Database is ready"

################################################################################
# Load data into postgres
################################################################################
echo "Setting up database for data import"
SETUP_SQL=${ASSETS}/postgres/events/setup.j2.sql
jinja2 ${SETUP_SQL} \
  -D table_name=${DEST_TABLE} \
  -D event_type=${DEST_EVENT_TYPE} \
  | psql -v ON_ERROR_STOP=ON "${DEST_CONNECTION_STRING}"
if [ "$?" -ne 0 ]; then
  echo "  Unable to set database up for data import"
  exit 1
fi

echo "  Importing data"
COPY_COMMAND="\copy ${DEST_TABLE} (event_id, event_type, vessel_id, event_start, event_end, event_info, event_vessels, event_mean_position) from stdin with (format 'csv')"
cat ${LOCAL_CSV_FILE} | psql -v ON_ERROR_STOP=ON "${DEST_CONNECTION_STRING}" -c "$COPY_COMMAND"
if [ "$?" -ne 0 ]; then
  echo "  Unable to import data into postgres"
  exit 1
fi

echo "  Indexing data"
INDEX_SQL=${ASSETS}/postgres/events/index.j2.sql
jinja2 ${INDEX_SQL} \
  -D table_name=${DEST_TABLE} \
  | psql -v ON_ERROR_STOP=ON "${DEST_CONNECTION_STRING}"
if [ "$?" -ne 0 ]; then
  echo "  Unable to set up indices for imported data"
  exit 1
fi

echo "  Done importing data"
