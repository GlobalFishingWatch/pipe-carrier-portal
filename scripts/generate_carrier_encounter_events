#!/bin/bash
source pipe-tools-utils

THIS_SCRIPT_DIR="$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )"
ASSETS=${THIS_SCRIPT_DIR}/../assets
ARGS=( \
  SOURCE_TABLE \
  SOURCE_FILTER \
  VESSEL_INFO \
  VESSEL_DATABASE \
  SPATIAL_MEASURES \
  COUNTRY_CODES \
  VOYAGES \
  NAMED_ANCHORAGES \
  FISHING_VESSELS \
  MAX_MEDIAN_SPEED_KNOTS \
  TEMP_DATASET
  DEST_TABLE \
)

################################################################################
# Validate and extract arguments
################################################################################
display_usage() {
  ARG_NAMES=$(echo "${ARGS[*]}")
  echo -e "\nUsage:\n$0 $ARG_NAMES\n"
}

if [[ $# -ne ${#ARGS[@]} ]]
then
    display_usage
    exit 1
fi

echo "Running $0"
ARG_VALUES=("$@")
for index in ${!ARGS[*]}; do
  echo "  ${ARGS[$index]}=${ARG_VALUES[$index]}"
  declare "${ARGS[$index]}"="${ARG_VALUES[$index]}"
done
################################################################################
# Force that the destination table exists
################################################################################
echo "Ensuring events table ${DEST_TABLE} exists"
TABLE_DESC=(
  "* Pipeline: ${PIPELINE} ${PIPELINE_VERSION}"
  "* Source: ${SOURCE_TABLE}"
  "* Command:"
  "$(basename $0)"
  "$@"
)
TABLE_DESC=$( IFS=$'\n'; echo "${TABLE_DESC[*]}" )
SCHEMA=${ASSETS}/bigquery/events.schema.json
bq mk --force \
  --description "${TABLE_DESC}" \
  ${DEST_TABLE} \
  ${SCHEMA}

if [ "$?" -ne 0 ]; then
  echo "  Unable to create table ${DEST_TABLE}"
  exit 1
fi
echo "  Events table exists"

################################################################################
# First generate intermediate encounter results into a temp table
################################################################################
echo "Generating intermediate results table"
UUID=$(uuidgen)
INTERMEDIATE_TABLE="${TEMP_DATASET}.${UUID//-/_}"
SQL=${ASSETS}/bigquery/events-encounter-events-01.sql.j2
jinja2 ${SQL} \
  -D source_table=${SOURCE_TABLE//:/.} \
  -D source_filter=${SOURCE_FILTER} \
  -D vessel_info=${VESSEL_INFO//:/.} \
  -D vessel_database=${VESSEL_DATABASE//:/.} \
  -D spatial_measures=${SPATIAL_MEASURES//:/.} \
  -D country_codes=${COUNTRY_CODES//:/.} \
  -D voyages=${VOYAGES//:/.} \
  -D named_anchorages=${NAMED_ANCHORAGES//:/.} \
  -D fishing_vessels=${FISHING_VESSELS//:/.} \
  -D max_median_speed_knots=${MAX_MEDIAN_SPEED_KNOTS} \
  | bq query --max_rows=0 --allow_large_results --replace --destination_table ${INTERMEDIATE_TABLE}

if [ "$?" -ne 0 ]; then
  echo "  Unable to insert records for table ${INTERMEDIATE_TABLE}"
  exit 1
fi

################################################################################
# Run the actual results query which converts the intermediate results into
# real data
################################################################################
echo "Processing intermediate results"
SQL=${ASSETS}/bigquery/events-encounter-events-02.sql.j2
jinja2 ${SQL} \
  -D complete_encounter_with_authorizations=${INTERMEDIATE_TABLE} \
  | bq query --max_rows=0 --allow_large_results --replace --destination_table ${DEST_TABLE}

if [ "$?" -ne 0 ]; then
  echo "  Unable to insert records for table ${DEST_TABLE}"
  exit 1
fi

################################################################################
# Remove the intermediate results table
################################################################################
echo "Deleting intermediate results table"
bq rm -t -f ${INTERMEDIATE_TABLE}

if [ "$?" -ne 0 ]; then
  echo "  Unable to remove intermediate table ${INTERMEDIATE_TABLE}"
  exit 1
fi

echo "${DEST_TABLE} Done."
