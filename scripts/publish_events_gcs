#!/bin/bash
source pipe-tools-utils

THIS_SCRIPT_DIR="$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )"
ASSETS=${THIS_SCRIPT_DIR}/../assets
ARGS=( \
  SOURCE \
  TEMP_BUCKET \
  DEST_LOCATION \
  DEST_EVENT_TYPE \
  DATASET_VERSION
)

################################################################################
# Validate and extract arguments
################################################################################
display_usage() {
  ARG_NAMES=$(echo "${ARGS[*]}")
  echo -e "\nUsage:\n$0 $ARG_NAMES\n"
}

if [[ $# -ne ${#ARGS[@]} ]]
then
    display_usage
    exit 1
fi

echo "Running $0"
ARG_VALUES=("$@")
for index in ${!ARGS[*]}; do
  echo "  ${ARGS[$index]}=${ARG_VALUES[$index]}"
  declare "${ARGS[$index]}"="${ARG_VALUES[$index]}"
done

################################################################################
# First generate intermediate events results into a temp table. (Only encounters)
################################################################################
if [ "${DEST_EVENT_TYPE}" = "encounter" ]; then
  echo "Generating intermediate results table"
  UUID="$(uuidgen)-temp-carriers"
  INTERMEDIATE_TABLE="${TEMP_DATASET}.${UUID//-/_}"
  SQL=${ASSETS}/bigquery/events-carrier-encounter-events.sql.j2
  jinja2 ${SQL} \
    -D encounter_events_table=${SOURCE//:/.} \
    | bq query --max_rows=0 --allow_large_results --replace --destination_table ${INTERMEDIATE_TABLE}

  if [ "$?" -ne 0 ]; then
    echo "  Unable to insert records for table ${INTERMEDIATE_TABLE}"
    exit 1
  fi

else
  INTERMEDIATE_TABLE=$SOURCE
fi

################################################################################
# Export events to json files
################################################################################
echo "Exporting events from $SOURCE"
TEMP_PATH=gs://${TEMP_BUCKET}/pipe-carrier-portal/$( date -u "+%FT%T.%N" )
EXTRACT_PATH=$TEMP_PATH/bq/*.json
bq extract \
  --destination_format=NEWLINE_DELIMITED_JSON \
  $INTERMEDIATE_TABLE \
  $EXTRACT_PATH
if [ "$?" -ne 0 ]; then
  echo "  Unable to extract ${INTERMEDIATE_TABLE} to ${EXTRACT_PATH}"
  exit 1
fi
echo "  Exported events from ${INTERMEDIATE_TABLE} to ${EXTRACT_PATH}"

################################################################################
# Download the json files locally as it's much faster
################################################################################
echo "Downloading json files"
LOCAL_JSON_PATH=./data/json
echo "  Creating local json directory"
mkdir -p ${LOCAL_JSON_PATH}
if [ "$?" -ne 0 ]; then
  echo "  Unable to create local JSON directory"
  exit 1
fi
echo "  Downloading json files"
gsutil -m cp ${EXTRACT_PATH} ${LOCAL_JSON_PATH}
if [ "$?" -ne 0 ]; then
  echo "  Unable to download JSON files locally"
  exit 1
fi
echo "  Downloaded JSON files"

################################################################################
# Convert format from json to downloadable csv format
################################################################################
echo "Converting downloaded files to csv format"
LOCAL_CSV_PATH=./data/csv
LOCAL_CSV_FILE=${LOCAL_CSV_PATH}/${DEST_EVENT_TYPE}.csv
echo "  Creating local csv directory"
mkdir -p ${LOCAL_CSV_PATH}
if [ "$?" -ne 0 ]; then
  echo "  Unable to create local CSV directory"
  exit 1
fi
echo "  Converting json events to csv format using script ${DEST_EVENT_TYPE}"
cat ${LOCAL_JSON_PATH}/*.json | python -m pipe_carrier_portal.downloadables.${DEST_EVENT_TYPE} ${LOCAL_CSV_FILE}
if [ "$?" -ne 0 ]; then
  echo "  Unable to convert events from JSON to CSV format"
  exit 1
fi
echo "  Coverted events from JSON to CSV"

################################################################################
# Zipping downloadable file
################################################################################
echo "Zipping downloadable file"
LOCAL_ZIP_PATH=./data/zip
LOCAL_ZIP_FILE=${LOCAL_ZIP_PATH}/${DEST_EVENT_TYPE}.zip
echo "  Creating local ZIP directory"
mkdir -p ${LOCAL_ZIP_PATH}
if [ "$?" -ne 0 ]; then
  echo "  Unable to create local ZIP directory"
  exit 1
fi
echo "  Converting json events to csv format using script ${DEST_EVENT_TYPE}"
zip -9 ${LOCAL_ZIP_FILE} ${LOCAL_CSV_FILE}
if [ "$?" -ne 0 ]; then
  echo "  Unable to ZIP CSV file"
  exit 1
fi
echo "  Zipped CSV file"

################################################################################
# Push the data to cloud storage
################################################################################
echo "Pushing the zip file to GCS at ${DEST_LOCATION}"

gsutil cp ${LOCAL_ZIP_FILE} ${DEST_LOCATION}/
if [ "$?" -ne 0 ]; then
  echo "  Unable to upload the ZIP file ${LOCAL_ZIP_FILE} to its target location ${DEST_LOCATION}"
  exit 1
fi

################################################################################
# Push additional files cloud storage
################################################################################
echo "Pushing additional files to GCS at ${DEST_LOCATION}"
LOCAL_ADDITIONAL_PATH=./data/additional
echo "  Creating additional files directory"
mkdir -p ${LOCAL_ADDITIONAL_PATH}
if [ "$?" -ne 0 ]; then
  echo "  Unable to create local additional files directory"
  exit 1
fi

echo "  Generating README fle"
LOCAL_README_FILE=${LOCAL_ADDITIONAL_PATH}/README.md
README_TEMPLATE=${ASSETS}/downloadables/README.md
jinja2 ${README_TEMPLATE} \
  -D dataset_version=${DATASET_VERSION} \
  > ${LOCAL_README_FILE}
if [ "$?" -ne 0 ]; then
  echo "  Unable to render the README template"
  exit 1
fi
gsutil cp ${LOCAL_ADDITIONAL_PATH}/* ${DEST_LOCATION}/
if [ "$?" -ne 0 ]; then
  echo "  Unable to upload the additional files to its target location ${DEST_LOCATION}"
  exit 1
fi

################################################################################
# Remove the intermediate results table. (Only encounters)
################################################################################
if [ "${DEST_EVENT_TYPE}" = "encounter" ]; then
  echo "Deleting intermediate results table"
  bq rm -t -f ${INTERMEDIATE_TABLE}

  if [ "$?" -ne 0 ]; then
    echo "  Unable to remove intermediate table ${INTERMEDIATE_TABLE}"
    exit 1
  fi
fi

echo "  Done importing data"
