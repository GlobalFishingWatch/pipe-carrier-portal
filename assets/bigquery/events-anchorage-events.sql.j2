#standardSQL
{% include 'util.sql.j2' %}

WITH
    source_port_visits_events AS (
        SELECT
            *,
        FROM
            `{{ published_events_port_visits }}`
        WHERE event_start BETWEEN '{{ start_date }}' AND '{{ end_date }}'
    ),

    source_published_events_encounters AS (
        SELECT *
        FROM `{{ published_events_encounters }}`
    ),

    source_published_events_loitering AS (
        SELECT *
        FROM `{{ published_events_loitering }}`
    ),

    source_vessel_info AS (
        SELECT *
        FROM `{{ vessel_info }}`
    ),

    #
    # Select all unique vessel ids. This is required because each vessel may
    # participate in multiple encounters, or may participate as a carrier in
    # some and as a donnor in other (in carrier-carrier encounters)
    #

    all_unique_vessel_ids AS (
        SELECT
            DISTINCT vessel_id
        FROM
            source_published_events_encounters
        UNION DISTINCT
        SELECT
            DISTINCT vessel_id
        FROM
            source_published_events_loitering
    ),

    deduplicate_all_unique_vessel_ids AS (
      SELECT DISTINCT vessel_id FROM all_unique_vessel_ids
    ),

    #
    # Extract mean anchorage info. Filter by confidence & event duration
    #

    port_visit_with_mean_anchorage_info AS (
        SELECT
            *,
            JSON_QUERY(event_info, '$.intermediate_anchorage') AS mean_anchorage_info
        FROM source_port_visits_events
           JOIN deduplicate_all_unique_vessel_ids USING (vessel_id)
        WHERE CAST(JSON_QUERY(event_info, '$.confidence') AS int64) = {{ confidence }}
            AND TIMESTAMP_DIFF(event_end, event_start, HOUR) >= {{ min_event_hours }}
    )

    SELECT
        'port' AS event_type,
        vessel_id,
        event_start,
        event_end,
        lat_mean,
        lon_mean,
        lat_min,
        lat_max,
        lon_min,
        lon_max,
        TO_JSON_STRING(STRUCT(
            ROUND(lat_mean,6) AS anchorage_lat,
            ROUND(lon_mean,6) AS anchorage_lon,
            STRUCT(
                JSON_QUERY(mean_anchorage_info, '$.anchorage_id') AS `anchorage_id`,
                JSON_QUERY(mean_anchorage_info, '$.id') AS `id`,
                JSON_QUERY(mean_anchorage_info, '$.name') AS `name`,
                JSON_QUERY(mean_anchorage_info, '$.top_destination') AS `top_destination`,
                JSON_QUERY(mean_anchorage_info, '$.flag') AS `flag`
            ) AS anchorage,
            STRUCT(
                IF (regions_mean_position IS NULL, [], regions_mean_position.eez) AS eez,
                IF (regions_mean_position IS NULL, [], regions_mean_position.fao) AS fao,
                IF (regions_mean_position IS NULL, [], regions_mean_position.rfmo) AS rfmo
            ) AS regions
        )) AS event_info,
        TO_JSON_STRING([STRUCT(
            vessel_id AS `id`,
            vessel.ssvid as ssvid,
            vessel.shipname.value AS name,
            `world-fishing-827.udfs.mmsi_to_iso3`(ssvid) AS flag
            )]
        ) AS event_vessels,
        ST_GEOGFROMTEXT(CONCAT('POINT (', CAST(lon_mean AS string), ' ', CAST(lat_mean AS string), ')')) AS event_geography
    FROM port_visit_with_mean_anchorage_info
        JOIN source_vessel_info vessel USING (vessel_id)